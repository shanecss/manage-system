项目创建完成之后，我们就可以进行开发了
1.引入elementUI
    在项目根目录执行命令：npm i element-ui -S
    在main.js中引入element:
        import ElementUI from 'element-ui'
        import 'element-ui/lib/theme-chalk/index.css'
        Vue.use(ElementUI)
2.关于样式
    在assets下新建css文件夹用来存放样式文件：
    common.scss //存放重置样式
    element.scss //存放element框架里元素样式做修改
    这样可能在项目一开始我们就要引入多个scss文件，可以在新建index.scss文件：
        @import "./common";
        @import "./element";
        然后在main.js里引入index.scss文件就好（用这种方法减少了写在main.js中的引入文件数量）：
            import './assets/css/index.scss'
        由此引入的样式文件可在全局起作用
    具体每个页面的样式可以写在每个页面.vue文件里，加上scoped表明样式只在当前页面起作用
    <style scoped lang="scss">
        @import "../assets/css/login.scss";  //引入方式
    </style>
3.配置sass全局变量
    不论是你使用的less或者sass都需要下载sass-resources-loader包,npm命令如下:npm install sass-resources-loader --save-dev
    a.在.eleectron-vue/webpack.renderer.config.js中的module配置中找到如下代码:
    module: {
        rules: [
            {
                test: /\.scss$/,
                use: ['vue-style-loader', 'css-loader', 'sass-loader']
            },
        ]
    },
    然后修改代码将这段代码修改如下:
    module: {
        rules: [
            {
                test: /\.scss$/,
                use: [
                    'vue-style-loader',
                    'css-loader',
                    'sass-loader',
                    {
                        loader: 'sass-resources-loader',
                        options: {
                            resources: path.resolve(__dirname,'../src/renderer/assets/css/index.scss'),//改路径为存放sass全局变量的路径
                        }
                    }
                ]
            }
        ]
    },
    b.直接向 node-sass 注入 index.scss
    在 .electron-vue/webpack.renderer.config.js 里编辑 vue-loader 的配置:
        {
            test: /\.vue$/,
            use: {
                loader: 'vue-loader',
                options: {
                    extractCSS: process.env.NODE_ENV === 'production',
                    loaders: {
                        sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax=1',
                        scss: 'vue-style-loader!css-loader!sass-loader?data=@import "./src/renderer/assets/css/index.scss";',
                        less: 'vue-style-loader!css-loader!less-loader'
                    }
                }
            }
        },
4.vue中跳转页面
    a.router-link跳转
        <!-- 直接跳转 -->
        <router-link to='/testDemo'>
            <button>点击跳转2</button>
        </router-link>
    
        <!-- 带参数跳转 -->
        <router-link :to="{path:'testDemo',query:{setid:123456}}">
            <button>点击跳转1</button>
        </router-link>
    
        <router-link :to="{name:'testDemo',params:{setid:1111222}}">
            <button>点击跳转3</button>
        </router-link>
    b.this.$router.push()
        <template>
            <div id='test'>
                <button @click='goTo()'>点击跳转4</button>
            </div>
        </template>
        <script>
            export default{
                name:'test',
                methods:{
                    goTo(){
                        //直接跳转
                        this.$router.push('/testDemo');
        
                        //带参数跳转
                        this.$router.push({path:'/testDemo',query:{setid:123456}});
                        this.$router.push({name:'testDemo',params:{setid:111222}});
                    }
                }
            }
        </script>
        params和query传参数有什么不一样？？在地址栏中可以看到，params传参数时，地址栏中看不到参数的内容，有点像ajax中的post传参，query传参数时，地址栏中可以看到传过来的参数信息，有点像ajax的个体传参
        如果单独传setId一个参数的时候，地址栏中的地址如下：
        第一种方式：path - query 传参：http://localhost:8080/#/test?setId=123456
        第二种方式：name - params传参：http://localhost:8080/#/test
        但是一般情况下，传参数是传递一个对象，当传递的是一个对象的时候，地址栏中的地址如下：
        第一种方式：path - query 传参：http://localhost:8080/#/test?testData=%5Bobject%20Object%5D
        第二种方式：name - params传参：http://localhost:8080/#/test
        接收方怎么接收参数？？this.$route.query.serid和this.$route.params.setid，以下举一个接收的例子
        注意接收参数时是 $route 不是 $router 
        <template>
            <div>
                testDemo{{this.$route.query.setid}}
            </div>
        </template>
    c.a标签可以跳转么？？可以跳转外部链接，不能路由跳转
5.图片路径问题
    <img src="" alt="" /> 采用相对路径就行
    背景图片：background: url(~@/assets/images/bg.jpg) no-repeat;
    至于前面为什么要加~@原因还不清楚
6.
